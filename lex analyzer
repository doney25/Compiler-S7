#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int isKeyword(char buffer[]) {
    if (strcmp(buffer, "printf") == 0 || strcmp(buffer, "scanf") == 0) {
        return 2;
    }
    char keywords[32][10] = {
        "auto", "break", "case", "char", "const", "continue", "default", "do",
        "double", "else", "enum", "extern", "float", "for", "goto", "if",
        "int", "long", "register", "return", "short", "signed", "sizeof",
        "static", "struct", "switch", "typedef", "union", "unsigned", "void",
        "volatile", "while"
    };

    for (int i = 0; i < 32; ++i) {
        if (strcmp(keywords[i], buffer) == 0)
            return 1;
    }
    return 0;
}
int isNumber(char buffer[]) {
    int i = 0, hasDot = 0;
    if (buffer[0] == '-' || buffer[0] == '+') i++;

    for (; buffer[i] != '\0'; i++) {
        if (buffer[i] == '.') {
            if (hasDot) return 0;
            hasDot = 1;
        } else if (!isdigit(buffer[i])) {
            return 0;
        }
    }
    return i > 0; 
}
int main() {
    char ch, buffer[20], operators[] = "+-*/%=<>&|!", separators[] = "();{}[],";
    FILE *fp;
    int i, j = 0;
    int in_single_line_comment = 0, in_multi_line_comment = 0;
    fp = fopen("new.txt", "r");
    if (fp == NULL) {
        printf("Error while opening the file\n");
        exit(0);
    }
    while ((ch = fgetc(fp)) != EOF) {
        if (ch == '/') {
            char next = fgetc(fp);
            if (next == '/') {
                in_single_line_comment = 1;
                continue;
            } else if (next == '*') {
                in_multi_line_comment = 1;
                continue;
            } else {
                ungetc(next, fp);
            }
        }
        if (in_single_line_comment && ch == '\n') {
            in_single_line_comment = 0;
            continue;
        }
        if (in_multi_line_comment && ch == '*') {
            char next = fgetc(fp);
            if (next == '/') {
                in_multi_line_comment = 0;
                continue;
            } else {
                ungetc(next, fp);
            }
        }
        if (in_single_line_comment || in_multi_line_comment)
            continue;
        for (i = 0; operators[i] != '\0'; ++i) {
            if (ch == operators[i]) {
                printf("%c is operator\n", ch);
                break;
            }
        }
        for (i = 0; separators[i] != '\0'; ++i) {
            if (ch == separators[i]) {
                printf("%c is separator\n", ch);
                break;
            }
        }
        if (isalnum(ch) || ch == '.' || ch == '_' || ch == '-') {
            buffer[j++] = ch;
        } else if ((ch == ' ' || ch == '\n' || ch == '\t') && j != 0) {
            buffer[j] = '\0';
            j = 0;

            if (isNumber(buffer)) {
                printf("%s is digit\n", buffer);
            } else {
                int result = isKeyword(buffer);
                if (result == 1)
                    printf("%s is keyword\n", buffer);
                else if (result == 2)
                    printf("%s is a function\n", buffer);
                else
                    printf("%s is an identifier\n", buffer);
            }
        }
    }
    if (j != 0) {
        buffer[j] = '\0';
        if (isNumber(buffer))
            printf("%s is digit\n", buffer);
        else {
            int result = isKeyword(buffer);
            if (result == 1)
                printf("%s is keyword\n", buffer);
            else if (result == 2)
                printf("%s is a function\n", buffer);
            else
                printf("%s is an identifier\n", buffer);
        }
    }
    fclose(fp);
    return 0;
}
